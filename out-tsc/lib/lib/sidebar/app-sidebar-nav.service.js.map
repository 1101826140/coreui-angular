{"version":3,"file":"app-sidebar-nav.service.js","sourceRoot":"","sources":["../../../../projects/coreui/angular/src/lib/sidebar/app-sidebar-nav.service.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,gBAAgB;IAA7B;QAmCS,aAAQ,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,YAAO,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAmBhD,CAAC;IArDC,QAAQ,CAAC,IAAI;QACX,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,SAAS,CAAC;SAClB;aAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YACrB,OAAO,OAAO,CAAC;SAChB;aAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YACxB,OAAO,UAAU,CAAC;SACnB;aAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YACrB,OAAO,OAAO,CAAC;SAChB;aAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;YACpC,OAAO,OAAO,CAAC;SAChB;aAAM;YACL,OAAO,MAAM,CAAC;SACf;IACH,CAAC;IAED,QAAQ,CAAC,IAAI;QACX,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrC,IAAI,SAAS,CAAC;QACd,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAC3C,SAAS,GAAG,OAAO,QAAQ,EAAE,CAAC;SAC/B;aAAM,IAAI,QAAQ,KAAK,UAAU,EAAE;YAClC,SAAS,GAAG,uBAAuB,CAAE;SACtC;aAAM;YACL,SAAS,GAAG,UAAU,CAAC;SACxB;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IAC/D,CAAC;IAEM,QAAQ,CAAC,MAAM,EAAE,IAAI;QAC1B,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;IAKM,YAAY,CAAC,IAAI;QACtB,MAAM,OAAO,GAAG;YACd,UAAU,EAAE,IAAI;SACjB,CAAC;QACF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QAC5B,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,aAAa,CAAC,IAAI;QACvB,MAAM,OAAO,GAAG;YACd,OAAO,EAAE,IAAI;SACd,CAAC;QACF,MAAM,OAAO,GAAG,SAAS,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QAC9C,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QACxC,OAAO,OAAO,CAAC;IACjB,CAAC;CACF","sourcesContent":["export class SidebarNavHelper {\r\n\r\n  itemType(item) {\r\n    if (item.divider) {\r\n      return 'divider';\r\n    } else if (item.title) {\r\n      return 'title';\r\n    } else if (item.children) {\r\n      return 'dropdown';\r\n    } else if (item.label) {\r\n      return 'label';\r\n    } else if (!Object.keys(item).length) {\r\n      return 'empty';\r\n    } else {\r\n      return 'link';\r\n    }\r\n  }\r\n\r\n  getClass(item) {\r\n    const itemType = this.itemType(item);\r\n    let itemClass;\r\n    if (['divider', 'title'].includes(itemType)) {\r\n      itemClass = `nav-${itemType}`;\r\n    } else if (itemType === 'dropdown') {\r\n      itemClass = 'nav-item nav-dropdown' ;\r\n    } else {\r\n      itemClass = 'nav-item';\r\n    }\r\n    return item.class ? `${itemClass} ${item.class}` : itemClass;\r\n  }\r\n\r\n  public isActive(router, item) {\r\n    return router.isActive(item.url, false);\r\n  }\r\n\r\n  public hasBadge = (item) => Boolean(item.badge);\r\n  public hasIcon = (item) => Boolean(item.icon);\r\n\r\n  public getIconClass(item) {\r\n    const classes = {\r\n      'nav-icon': true\r\n    };\r\n    const icon = item.icon;\r\n    classes[icon] = !!item.icon;\r\n    return classes;\r\n  }\r\n\r\n  public getBadgeClass(item) {\r\n    const classes = {\r\n      'badge': true\r\n    };\r\n    const variant = `badge-${item.badge.variant}`;\r\n    classes[variant] = !!item.badge.variant;\r\n    return classes;\r\n  }\r\n}\r\n"]}