{"version":3,"file":"toggle-classes.js","sourceRoot":"","sources":["../../../../projects/coreui/angular/src/lib/shared/toggle-classes.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAC,QAAQ,EAAC,MAAM,iBAAiB,CAAC;AAEzC,MAAM,aAAa,GAAG,CAAC,aAAa,EAAE,EAAE;IACtC,MAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3F,OAAO,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;IAClD,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACzC,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IAErD,IAAI,aAAa,CAAC,aAAa,CAAC,EAAE;QAChC,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KACrE;SAAM;QACL,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACrC;AACH,CAAC,CAAC;AAGF,IAAa,YAAY,GAAzB,MAAa,YAAY;IAEvB,YAC4B,QAAa,EAC/B,QAAmB;QADD,aAAQ,GAAR,QAAQ,CAAK;QAC/B,aAAQ,GAAR,QAAQ,CAAW;IAC1B,CAAC;IAEJ,aAAa,CAAC,aAAa;QACzB,MAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAChG,OAAO,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,aAAa,CAAC,MAAM,EAAE,UAAU;QAC9B,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;QAErD,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,EAAE;YACrC,aAAa,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;SACpF;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;SACpD;IACH,CAAC;CACF,CAAA;AAtBY,YAAY;IADxB,UAAU,EAAE;IAIR,mBAAA,MAAM,CAAC,QAAQ,CAAC,CAAA;yEACC,SAAS,oBAAT,SAAS;GAJlB,YAAY,CAsBxB;SAtBY,YAAY","sourcesContent":["import {Inject, Injectable, Renderer2} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\nconst RemoveClasses = (NewClassNames) => {\r\n  const MatchClasses = NewClassNames.map((Class) => document.body.classList.contains(Class));\r\n  return MatchClasses.indexOf(true) !== -1;\r\n};\r\n\r\nexport const ToggleClasses = (Toggle, ClassNames) => {\r\n  const Level = ClassNames.indexOf(Toggle);\r\n  const NewClassNames = ClassNames.slice(0, Level + 1);\r\n\r\n  if (RemoveClasses(NewClassNames)) {\r\n    NewClassNames.map((Class) => document.body.classList.remove(Class));\r\n  } else {\r\n    document.body.classList.add(Toggle);\r\n  }\r\n};\r\n\r\n@Injectable()\r\nexport class ClassToggler {\r\n\r\n  constructor(\r\n    @Inject(DOCUMENT) private document: any,\r\n    private renderer: Renderer2,\r\n  ) {}\r\n\r\n  removeClasses(NewClassNames) {\r\n    const MatchClasses = NewClassNames.map((Class) => this.document.body.classList.contains(Class));\r\n    return MatchClasses.indexOf(true) !== -1;\r\n  }\r\n\r\n  toggleClasses(Toggle, ClassNames) {\r\n    const Level = ClassNames.indexOf(Toggle);\r\n    const NewClassNames = ClassNames.slice(0, Level + 1);\r\n\r\n    if (this.removeClasses(NewClassNames)) {\r\n      NewClassNames.map((Class) => this.renderer.removeClass(this.document.body, Class));\r\n    } else {\r\n      this.renderer.addClass(this.document.body, Toggle);\r\n    }\r\n  }\r\n}\r\n"]}